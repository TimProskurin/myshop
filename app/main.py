from datetime import datetime, timezone
from typing import AsyncGenerator
from fastapi import FastAPI, HTTPException, Depends, status, Request, Form
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database import get_async_session
from app import models, schemas, security
from app.models import Category, Product, User
from app.schemas import UserCreate
from app.security import verify_password
import bcrypt
from fastapi import FastAPI, Response
from itsdangerous import URLSafeSerializer
import os
from fastapi import HTTPException, Request
from fastapi.responses import JSONResponse
from itsdangerous import URLSafeSerializer
from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import async_engine_from_config
from app.database import Base, async_session
application = FastAPI()
templates = Jinja2Templates(directory="app/templates", auto_reload=True)
application.mount("/static", StaticFiles(directory="app/static"), name="static")
SECRET_KEY = "secretkey"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with get_async_session() as session:
        yield session

async def authenticate_user(db: AsyncSession, email: str, password: str):
    result = await db.execute(select(models.User).where(models.User.email == email))
    user = result.scalars().first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if not bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    return user


@application.on_event("shutdown")
async def shutdown():
    await async_session().close_all()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
@application.get("/.well-known/appspecific/com.chrome.devtools.json")
async def ignore_chrome_devtools():
    return Response(status_code=200)

@application.middleware("http")
async def csrf_middleware(request: Request, call_next):
    if request.method in {"GET", "HEAD", "OPTIONS"}:
        return await call_next(request)

    csrf_from_header = request.headers.get("X-CSRF-Token")
    csrf_from_cookie = request.cookies.get("fastapi-csrf-token")

    if not csrf_from_header or not csrf_from_cookie:
        return JSONResponse({"detail": "CSRF token missing"}, 403)

    serializer = URLSafeSerializer(SECRET_KEY)
    try:
        data_header = serializer.loads(csrf_from_header)
        data_cookie = serializer.loads(csrf_from_cookie)
    except Exception:
        return JSONResponse({"detail": "Invalid CSRF token"}, 403)

    if data_header != data_cookie:
        return JSONResponse({"detail": "CSRF token mismatch"}, 403)

    return await call_next(request)

@application.get("/csrf-token")
async def get_csrf_token(response: Response):
    serializer = URLSafeSerializer(SECRET_KEY)
    csrf_token = serializer.dumps({"csrf": os.urandom(24).hex()})
    print(f"üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞: {csrf_token}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    response.set_cookie(
        key="fastapi-csrf-token",
        value=csrf_token,
        httponly=False,
        samesite="strict",
        secure=False,
        path="/",
        domain = "127.0.0.1"
    )
    return {"message": "CSRF token generated"}
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω)
@application.post("/login")
async def login(
        user: schemas.UserLogin,
        db: AsyncSession = Depends(get_db)
):
    print("\n\n--- –ù–∞—á–∞–ª–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /login ---")
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={user.email}, –ø–∞—Ä–æ–ª—å=******")

    print("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ...")
    db_user = await authenticate_user(db, user.email, user.password)

    if not db_user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.email} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    access_token = security.create_access_token(data={"sub": db_user.email})
    print(f"JWT-—Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {access_token}")
    return {"access_token": access_token, "token_type": "bearer"}



# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞
@application.get("/login")
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})


# –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@application.post("/register", response_model=schemas.Token)
async def register(user: UserCreate, db: AsyncSession = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(select(models.User).filter(models.User.email == user.email))
    existing_user = result.scalars().first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    new_user = models.User(
        first_name=user.first_name,
        last_name=user.last_name,
        email=user.email,
        phone=user.phone,
        address=user.address,
        registration_date=datetime.now(timezone.utc).replace(tzinfo=None),
        password=user.password,  # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )

    db.add(new_user)
    try:
        await db.commit()
    except Exception as e:
        await db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {e}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

    await db.refresh(new_user)

    print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è: {new_user.email}")
    access_token = security.create_access_token(data={"sub": new_user.email})
    print(f"–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {access_token}")
    return {"access_token": access_token, "token_type": "bearer"}

@application.get("/register")
async def register_page(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})
# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@application.get("/")
async def index(request: Request, db: AsyncSession = Depends(get_db)):
    try:
        result = await db.execute(select(models.Category))
        categories = result.scalars().all()
        return templates.TemplateResponse("index.html", {"request": request, "categories": categories})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal Server Error: {e}")


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@application.get("/category/{category_id}")
async def category_detail(request: Request, category_id: int, db: AsyncSession = Depends(get_async_session)):
    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º db(), –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º db
    result = await db.execute(select(Category).filter(Category.category_id == category_id))
    category = result.scalars().first()

    if category is None:
        return {"message": "Category not found"}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await db.execute(select(Product).filter(Product.category_id == category_id))
    products = result.scalars().all()

    return templates.TemplateResponse("category.html", {
        "request": request,
        "category": category,
        "products": products
    })


# –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@application.get("/test-db-connection")
async def test_db_connection(db: AsyncSession = Depends(get_db)):
    try:
        await db.execute("SELECT 1")
        return {"status": "DB Connection Successful"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"DB Error: {e}")
